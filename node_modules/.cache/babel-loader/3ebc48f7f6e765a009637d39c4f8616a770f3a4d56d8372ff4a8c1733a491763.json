{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Hourly Forecast\", -1 /* HOISTED */)), _ctx.hourlyData && _ctx.hourlyData.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Bar, {\n    data: _ctx.chartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"No data available for hourly forecast.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_ctx","hourlyData","length","_hoisted_1","_createVNode","_component_Bar","data","chartData","options","chartOptions","_hoisted_2","_cache"],"sources":["/Users/marianfoster/vue-weather/src/components/Hourly.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Hourly Forecast</h2>\n    <div v-if=\"hourlyData && hourlyData.length > 0\">\n      <Bar :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <p>No data available for hourly forecast.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default defineComponent({\n  name: \"HourlyForecast\",\n  components: {\n    Bar,\n  },\n  props: {\n    hourlyData: {\n      type: Array,\n      required: true,\n    },\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [\n        {\n          label: \"Temperature (Â°F)\",\n          data: [],\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    });\n\n    const chartOptions = ref({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n        },\n        title: {\n          display: true,\n          text: \"Hourly Temperature\",\n        },\n      },\n    });\n\n    // Update chart data when component is mounted\n    onMounted(() => {\n      updateChartData();\n    });\n\n    function updateChartData() {\n      if (props.hourlyData && props.hourlyData.length > 0) {\n        const labels = props.hourlyData.slice(0, 12).map((item) => {\n          const date = new Date(item.dt * 1000); // Convert timestamp to date\n          return `${date.getHours()}:00`;\n        });\n\n        const temperatures = props.hourlyData.slice(0, 12).map((item) => item.temp);\n\n        chartData.value.labels = labels;\n        chartData.value.datasets[0].data = temperatures;\n      }\n    }\n\n    return { chartData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\nh2 {\n  text-align: center;\n}\n</style>\n\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAwB,YAApB,iBAAe,sBACRC,IAAA,CAAAC,UAAU,IAAID,IAAA,CAAAC,UAAU,CAACC,MAAM,Q,cAA1CJ,mBAAA,CAEM,OALVK,UAAA,GAIMC,YAAA,CAAiDC,cAAA;IAA3CC,IAAI,EAAEN,IAAA,CAAAO,SAAS;IAAGC,OAAO,EAAER,IAAA,CAAAS;mEAEnCX,mBAAA,CAEM,OARVY,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAOMZ,mBAAA,CAA6C,WAA1C,wCAAsC,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}