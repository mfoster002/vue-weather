{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"5 Day Forecast\", -1 /* HOISTED */)), _createCommentVNode(\" Search Bar for Dynamic Location \"), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.city = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $setup.fetchForecastData && $setup.fetchForecastData(...args), [\"enter\"])),\n    type: \"text\",\n    placeholder: \"Enter city name\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.city]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.fetchForecastData && $setup.fetchForecastData(...args))\n  }, \"Get Forecast\")]), _cache[4] || (_cache[4] = _createElementVNode(\"canvas\", {\n    id: \"forecastChart\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_createCommentVNode","_cache","$event","$setup","city","onKeyup","_withKeys","args","fetchForecastData","type","placeholder","onClick","id"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>5 Day Forecast</h1>\n\n    <!-- Search Bar for Dynamic Location -->\n    <div>\n      <input\n        v-model=\"city\"\n        @keyup.enter=\"fetchForecastData\"\n        type=\"text\"\n        placeholder=\"Enter city name\"\n      />\n      <button @click=\"fetchForecastData\">Get Forecast</button>\n    </div>\n\n    <canvas id=\"forecastChart\"></canvas>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue';\nimport Chart from 'chart.js/auto'; // Make sure you have Chart.js installed\n\nexport default {\n  name: 'FiveDayForecast',\n  setup() {\n    const city = ref('London'); // Default city is set to London\n    const chartData = ref(null);\n\n    // Fetch data for 5-day forecast based on city\n    const fetchForecastData = async () => {\n      const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city.value}&cnt=5&units=metric&appid=${apiKey}`;\n\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Process the forecast data for the chart\n        chartData.value = data.list.map(item => ({\n          date: item.dt_txt,\n          temp: item.main.temp,\n        }));\n\n        // Render the chart after fetching the data\n        renderChart();\n      } catch (error) {\n        console.error('Error fetching forecast data:', error);\n      }\n    };\n\n    // Render the chart\n    const renderChart = () => {\n      if (chartData.value) {\n        const ctx = document.getElementById('forecastChart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: chartData.value.map(item => item.date),\n            datasets: [\n              {\n                label: 'Temperature (Â°C)',\n                data: chartData.value.map(item => item.temp),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            scales: {\n              x: {\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 5,\n                },\n              },\n            },\n          },\n        });\n      }\n    };\n\n    // Fetch data on mount with the default city\n    onMounted(() => {\n      fetchForecastData();\n    });\n\n    // Watch for changes in the city input to refetch data\n    watch(city, fetchForecastData);\n\n    return {\n      city,\n      chartData,\n      fetchForecastData,\n    };\n  },\n};\n</script>\n\n<style scoped>\n#forecastChart {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAeM,c,0BAdJC,mBAAA,CAAuB,YAAnB,gBAAc,sBAElBC,mBAAA,qCAAwC,EACxCD,mBAAA,CAQM,c,gBAPJA,mBAAA,CAKE;IAXR,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOiBC,MAAA,CAAAC,IAAI,GAAAF,MAAA;IACZG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,MARdK,SAAA,KAAAC,IAAA,KAQsBJ,MAAA,CAAAK,iBAAA,IAAAL,MAAA,CAAAK,iBAAA,IAAAD,IAAA,CAAiB;IAC/BE,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC;iEAHHP,MAAA,CAAAC,IAAI,E,GAKfL,mBAAA,CAAwD;IAA/CY,OAAK,EAAAV,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEJ,MAAA,CAAAK,iBAAA,IAAAL,MAAA,CAAAK,iBAAA,IAAAD,IAAA,CAAiB;KAAE,cAAY,E,6BAGjDR,mBAAA,CAAoC;IAA5Ba,EAAE,EAAC;EAAe,4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}