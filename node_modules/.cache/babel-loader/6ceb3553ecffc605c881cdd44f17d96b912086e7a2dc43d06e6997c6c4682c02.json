{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { Chart } from 'chart.js';\nexport default {\n  name: 'FiveDayForecast',\n  setup() {\n    const route = useRoute();\n    const location = ref(route.params.location);\n    const forecastData = ref([]);\n    const errorMessage = ref('');\n    const fetchForecastData = () => {\n      if (!location.value) {\n        errorMessage.value = 'No location provided.';\n        return;\n      }\n      const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location.value}&units=imperial&cnt=5&appid=${apiKey}`;\n      fetch(apiUrl).then(res => res.json()).then(data => {\n        if (data.cod !== '200') {\n          errorMessage.value = 'Unable to fetch forecast data.';\n          return;\n        }\n        forecastData.value = data.list.map(item => ({\n          date: new Date(item.dt * 1000).toLocaleDateString(),\n          temp: item.main.temp\n        }));\n        createChart();\n      }).catch(err => {\n        errorMessage.value = 'Error fetching forecast data.';\n        console.error(err);\n      });\n    };\n    const createChart = () => {\n      const ctx = document.getElementById('forecast-chart').getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: forecastData.value.map(item => item.date),\n          datasets: [{\n            label: 'Temperature (°F)',\n            data: forecastData.value.map(item => item.temp),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    onMounted(() => {\n      fetchForecastData();\n    });\n    watch(location, newLocation => {\n      if (newLocation) {\n        fetchForecastData();\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      location,\n      forecastData,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","useRoute","Chart","name","setup","route","location","params","forecastData","errorMessage","fetchForecastData","value","apiKey","apiUrl","fetch","then","res","json","data","cod","list","map","item","date","Date","dt","toLocaleDateString","temp","main","createChart","catch","err","console","error","ctx","document","getElementById","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","newLocation","immediate"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div class=\"five-day-forecast\">\n    <h2 v-if=\"location\">{{ location }} - 5-Day Forecast</h2>\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n    \n    <canvas v-if=\"forecastData.length\" id=\"forecast-chart\" width=\"400\" height=\"200\"></canvas>\n    \n    <div v-if=\"!location\" class=\"error-message\">\n      No location provided. Please search for a city first.\n    </div>\n    \n    <button @click=\"$router.go(-1)\">Go Back</button>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { Chart } from 'chart.js';\n\nexport default {\n  name: 'FiveDayForecast',\n  setup() {\n    const route = useRoute();\n    const location = ref(route.params.location);\n    const forecastData = ref([]);\n    const errorMessage = ref('');\n\n    const fetchForecastData = () => {\n      if (!location.value) {\n        errorMessage.value = 'No location provided.';\n        return;\n      }\n\n      const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location.value}&units=imperial&cnt=5&appid=${apiKey}`;\n\n      fetch(apiUrl)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.cod !== '200') {\n            errorMessage.value = 'Unable to fetch forecast data.';\n            return;\n          }\n\n          forecastData.value = data.list.map((item) => ({\n            date: new Date(item.dt * 1000).toLocaleDateString(),\n            temp: item.main.temp,\n          }));\n\n          createChart();\n        })\n        .catch((err) => {\n          errorMessage.value = 'Error fetching forecast data.';\n          console.error(err);\n        });\n    };\n\n    const createChart = () => {\n      const ctx = document.getElementById('forecast-chart').getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: forecastData.value.map((item) => item.date),\n          datasets: [{\n            label: 'Temperature (°F)',\n            data: forecastData.value.map((item) => item.temp),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          }],\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        },\n      });\n    };\n\n    onMounted(() => {\n      fetchForecastData();\n    });\n\n    watch(location, (newLocation) => {\n      if (newLocation) {\n        fetchForecastData();\n      }\n    }, { immediate: true });\n\n    return {\n      location,\n      forecastData,\n      errorMessage,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.five-day-forecast {\n  padding: 20px;\n  text-align: center;\n}\n\n.error-message {\n  color: red;\n  margin-top: 20px;\n}\n</style>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}