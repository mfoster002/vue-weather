{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hourly-forecast-card\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"chart-container\"\n};\nconst _hoisted_4 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"Hourly Forecast for \" + _toDisplayString($props.location), 1 /* TEXT */), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.hourlyData.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_Bar, {\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"No hourly data available.\")), _createElementVNode(\"button\", {\n    class: \"\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \"Go Back\")]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","location","$data","errorMessage","_hoisted_2","_createCommentVNode","hourlyData","length","_hoisted_3","_createVNode","_component_Bar","data","chartData","options","chartOptions","_hoisted_4","onClick","_cache","args","$options","goBack"],"sources":["/Users/marianfoster/vue-weather/src/views/HourlyForecast.vue"],"sourcesContent":["<template>\n  <div class=\"hourly-forecast-card\">\n    <h2>Hourly Forecast for {{ location }}</h2>\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n    <div class=\"chart-container\" v-if=\"hourlyData.length\">\n      <Bar :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <p v-else>No hourly data available.</p>\n    <button class @click=\"goBack\">Go Back</button>\n  </div>\n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default {\n  name: 'HourlyForecast',\n  components: {\n    Bar,\n  },\n  props: {\n    location: {\n      type: String,\n      required: true\n    },\n    lat: {\n      type: String,\n      required: true\n    },\n    lon: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      hourlyData: [],\n      chartData: { labels: [], datasets: [] },\n      chartOptions: { responsive: true, scales: { y: { beginAtZero: true } } },\n      errorMessage: ''\n    };\n  },\n  watch: {\n    location: {\n      immediate: true,\n      handler() {\n        this.fetchHourlyData();\n      },\n    },\n  },\n  methods: {\n    fetchHourlyData() {\n      console.log('Fetching hourly data for:', this.location);\n      const apiKey = '4df475f18aaaf4aba5fb2eb54246d4f8';\n      const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${this.lat}&lon=${this.lon}&units=imperial&appid=${apiKey}`;\n      \n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.cod !== '200' || !data.list) {\n            this.errorMessage = 'Unable to fetch hourly data.';\n            console.log('Error fetching data:', data.message);\n            return;\n          }\n          console.log('Hourly data fetched:', data);\n          this.hourlyData = data.list.slice(0, 12).map((item) => ({\n            dt: item.dt,\n            temp: item.main.temp,\n            time: new Date(item.dt * 1000).toLocaleTimeString(),\n          }));\n          this.updateChartData();\n        })\n        .catch((err) => {\n          this.errorMessage = 'Error fetching hourly data.';\n          console.error(err);\n        });\n    },\n    updateChartData() {\n      this.chartData.labels = this.hourlyData.map((data) => data.time);\n      this.chartData.datasets = [\n        {\n          label: 'Temperature (Â°F)',\n          data: this.hourlyData.map((data) => data.temp),\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        },\n      ];\n    },\n    goBack() {\n      this.$router.go(-1);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.hourly-forecast-card {\n  background-color: rgba(255, 255, 255, 0.9);\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  text-align: center;\n}\n\n.error-message {\n  color: red;\n  margin-top: 20px;\n}\n\n.chart-container {\n  margin-top: 20px;\n}\n</style>\n\n\n\n\n\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAsB;;EADnCC,GAAA;EAG6BD,KAAK,EAAC;;;EAHnCC,GAAA;EAISD,KAAK,EAAC;;;EAJfC,GAAA;AAAA;;;uBACEC,mBAAA,CAQM,OARNC,UAQM,GAPJC,mBAAA,CAA2C,YAAvC,sBAAoB,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,QAAQ,kBACxBC,KAAA,CAAAC,YAAY,I,cAAvBP,mBAAA,CAAuE,OAAvEQ,UAAuE,EAAAL,gBAAA,CAArBG,KAAA,CAAAC,YAAY,oBAHlEE,mBAAA,gBAIuCH,KAAA,CAAAI,UAAU,CAACC,MAAM,I,cAApDX,mBAAA,CAEM,OAFNY,UAEM,GADJC,YAAA,CAAiDC,cAAA;IAA3CC,IAAI,EAAET,KAAA,CAAAU,SAAS;IAAGC,OAAO,EAAEX,KAAA,CAAAY;mEAEnClB,mBAAA,CAAuC,KAP3CmB,UAAA,EAOc,2BAAyB,IACnCjB,mBAAA,CAA8C;IAAtCJ,KAAK,EAAL,EAAK;IAAEsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,SAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}