{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      api_key: 'YOUR_API_KEY',\n      url_base: 'https://api.openweathermap.org/data/2.5/',\n      query: '',\n      weather: {},\n      geoData: {},\n      savedLocations: [],\n      errorMessage: ''\n    };\n  },\n  computed: {\n    weatherClass() {\n      if (!this.weather.weather) return 'default';\n      const weatherCondition = this.weather.weather[0].main.toLowerCase();\n      const conditionMap = {\n        clear: 'clear',\n        clouds: 'clouds',\n        rain: 'rain',\n        drizzle: 'drizzle',\n        thunderstorm: 'thunderstorm',\n        snow: 'snow',\n        mist: 'mist',\n        haze: 'mist',\n        warm: 'warm',\n        cold: 'cold',\n        night: 'night'\n      };\n      return conditionMap[weatherCondition] || 'default';\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === 'Enter' && this.query.trim() !== '') {\n        this.errorMessage = '';\n        fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`).then(res => res.json()).then(data => {\n          if (data.cod !== 200) {\n            this.errorMessage = 'Location not found. Please try again.';\n            return;\n          }\n          this.weather = data;\n          this.fetchGeoData();\n        }).catch(err => {\n          this.errorMessage = 'Error fetching weather data. Please try again later.';\n          console.error(err);\n        });\n      }\n    },\n    fetchGeoData() {\n      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.weather.name}&limit=1&appid=${this.api_key}`).then(res => res.json()).then(data => {\n        if (data.length > 0) {\n          const {\n            name,\n            state,\n            country\n          } = data[0];\n          this.geoData = {\n            name,\n            state,\n            country\n          };\n        }\n      }).catch(err => {\n        console.error('Error fetching geo data:', err);\n        this.errorMessage = 'Error fetching geo data.';\n      });\n    },\n    saveLocation() {\n      if (this.weather.name && !this.savedLocations.includes(this.weather.name)) {\n        this.savedLocations.push(this.weather.name);\n        localStorage.setItem('savedLocations', JSON.stringify(this.savedLocations));\n      }\n    },\n    dateBuilder() {\n      const now = new Date();\n      const options = {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return now.toLocaleDateString('en-US', options);\n    }\n  },\n  mounted() {\n    const saved = localStorage.getItem('savedLocations');\n    this.savedLocations = saved ? JSON.parse(saved) : [];\n  }\n};","map":{"version":3,"names":["name","data","api_key","url_base","query","weather","geoData","savedLocations","errorMessage","computed","weatherClass","weatherCondition","main","toLowerCase","conditionMap","clear","clouds","rain","drizzle","thunderstorm","snow","mist","haze","warm","cold","night","methods","fetchWeather","e","key","trim","fetch","then","res","json","cod","fetchGeoData","catch","err","console","error","length","state","country","saveLocation","includes","push","localStorage","setItem","JSON","stringify","dateBuilder","now","Date","options","weekday","year","month","day","toLocaleDateString","mounted","saved","getItem","parse"],"sources":["/Users/marianfoster/vue-weather/src/App.vue"],"sourcesContent":["<template> <div :class=\"weatherClass\" id=\"app\"> <main> <div class=\"search-box\"> <input type=\"text\" class=\"search-bar\" placeholder=\"Search...\" v-model=\"query\" @keypress=\"fetchWeather\" /> </div> <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div> <div v-if=\"weather.main && !errorMessage\" class=\"weather-wrap\"> <div class=\"location-box\"> <div class=\"location\">{{ weather.name }}, {{ geoData.state }}, {{ weather.sys.country }}</div> <div class=\"date\">{{ dateBuilder() }}</div> </div> <div class=\"weather-box\"> <div class=\"temp\">{{ Math.round(weather.main.temp) }}Â°F</div> <div class=\"weather\">{{ weather.weather[0].main }}</div> </div> <button @click=\"saveLocation\">Save Location</button> <router-link :to=\"{ name: 'FiveDayForecast', params: { location: weather.name } }\"> <button>Go to 5-Day Forecast</button> </router-link> <router-link :to=\"{ name: 'HourlyForecast', params: { location: weather.name } }\"> <button>Go to Hourly Forecast</button> </router-link> </div> <div v-if=\"savedLocations.length\"> <h3>Saved Locations:</h3> <ul> <li v-for=\"(location, index) in savedLocations\" :key=\"index\"> {{ location }} </li> </ul> </div> </main> </div> </template> <script> export default { name: 'App', data() { return { api_key: 'YOUR_API_KEY', url_base: 'https://api.openweathermap.org/data/2.5/', query: '', weather: {}, geoData: {}, savedLocations: [], errorMessage: '', }; }, computed: { weatherClass() { if (!this.weather.weather) return 'default'; const weatherCondition = this.weather.weather[0].main.toLowerCase(); const conditionMap = { clear: 'clear', clouds: 'clouds', rain: 'rain', drizzle: 'drizzle', thunderstorm: 'thunderstorm', snow: 'snow', mist: 'mist', haze: 'mist', warm: 'warm', cold: 'cold', night: 'night', }; return conditionMap[weatherCondition] || 'default'; }, }, methods: { fetchWeather(e) { if (e.key === 'Enter' && this.query.trim() !== '') { this.errorMessage = ''; fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`) .then((res) => res.json()) .then((data) => { if (data.cod !== 200) { this.errorMessage = 'Location not found. Please try again.'; return; } this.weather = data; this.fetchGeoData(); }) .catch((err) => { this.errorMessage = 'Error fetching weather data. Please try again later.'; console.error(err); }); } }, fetchGeoData() { fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.weather.name}&limit=1&appid=${this.api_key}`) .then((res) => res.json()) .then((data) => { if (data.length > 0) { const { name, state, country } = data[0]; this.geoData = { name, state, country }; } }) .catch((err) => { console.error('Error fetching geo data:', err); this.errorMessage = 'Error fetching geo data.'; }); }, saveLocation() { if (this.weather.name && !this.savedLocations.includes(this.weather.name)) { this.savedLocations.push(this.weather.name); localStorage.setItem('savedLocations', JSON.stringify(this.savedLocations)); } }, dateBuilder() { const now = new Date(); const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }; return now.toLocaleDateString('en-US', options); }, }, mounted() { const saved = localStorage.getItem('savedLocations'); this.savedLocations = saved ? JSON.parse(saved) : []; }, }; </script>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'montserrat', sans-serif;\n}\n\n#app {\n  background-image: url('./assets/default.jpg');\n  background-size: cover;\n  background-position: bottom;\n  transition: 0.4s;\n}\n\n#app.default {\n  background-image: url('./assets/default.jpg');\n}\n\n#app.clouds {\n  background-image: url('./assets/cloudy.jpg');\n}\n\n#app.clear {\n  background-image: url('./assets/sunny.jpg');\n}\n\n#app.mist {\n  background-image: url('./assets/fog.jpg');\n}\n\n#app.snow {\n  background-image: url('./assets/snow.jpg');\n}\n\n#app.rain {\n  background-image: url('./assets/rain.jpg');\n}\n\n#app.drizzle {\n  background-image: url('./assets/drizzle.jpg');\n}\n\n#app.thunderstorm {\n  background-image: url('./assets/thunderstorm.jpg');\n}\n\nmain {\n  min-height: 100vh;\n  padding: 25px;\n\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0.75));\n}\n\n.search-box {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.search-box .search-bar {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  \n  color: #313131;\n  font-size: 20px;\n\n  appearance: none;\n  border:none;\n  outline: none;\n  background: none;\n\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.5);\n  border-radius: 0px 16px 0px 16px;\n  transition: 0.4s;\n}\n\n.search-box .search-bar:focus {\n  box-shadow: 0px 0px 16px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.75);\n  border-radius: 16px 0px 16px 0px;\n}\n\n.location-box .location {\n  color: #FFF;\n  font-size: 32px;\n  font-weight: 500;\n  text-align: center;\n  text-shadow: 1px 3px rgba(0, 0, 0, 0.25);\n}\n\n.location-box .date {\n  color: #FFF;\n  font-size: 20px;\n  font-weight: 300;\n  font-style: italic;\n  text-align: center;\n}\n\n.weather-box {\n  text-align: center;\n}\n\n.weather-box .temp {\n  display: inline-block;\n  padding: 10px 25px;\n  color: #FFF;\n  font-size: 102px;\n  font-weight: 900;\n\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n  background-color:rgba(255, 255, 255, 0.25);\n  border-radius: 16px;\n  margin: 30px 0px;\n\n  box-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n\n.weather-box .weather {\n  color: #FFF;\n  font-size: 48px;\n  font-weight: 700;\n  font-style: italic;\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}