{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"forecast-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($props.location) + \" - 5-Day Forecast\", 1 /* TEXT */), $data.chartData.datasets[0].data.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_Bar, {\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Loading forecast...\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","location","$data","chartData","datasets","data","length","_hoisted_2","_createVNode","_component_Bar","options","chartOptions","_hoisted_3","_cache"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div class=\"forecast-container\">\n    <h2>{{ location }} - 5-Day Forecast</h2>\n    <div v-if=\"chartData.datasets[0].data.length > 0\">\n      <Bar :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <p>Loading forecast...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default {\n  name: 'FiveDayForecast',\n  components: {\n    Bar,\n  },\n  props: {\n    forecastData: {\n      type: Array,\n      required: true, // Ensure forecastData is always passed\n    },\n    location: {\n      type: String,\n      default: 'Your Location', // Default location if not provided\n    },\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [], // Days of the week\n        datasets: [\n          {\n            label: 'Temperature (°F)',\n            data: [], // Temperatures for the next 5 days\n            backgroundColor: 'rgba(75, 192, 192, 0.5)', // Bar fill color\n            borderColor: 'rgb(75, 192, 192)', // Bar border color\n            borderWidth: 1,\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n          tooltip: {\n            callbacks: {\n              label: (tooltipItem) => {\n                return `${tooltipItem.raw} °F`;\n              },\n            },\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Day',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (°F)',\n            },\n            min: 0,\n            max: 100, // Adjust based on expected temperature range\n          },\n        },\n      },\n    };\n  },\n  methods: {\n    processForecastData() {\n      const temperatures = [];\n      const days = new Set();\n\n      // Process forecastData for unique days\n      this.forecastData.forEach((item) => {\n        const date = new Date(item.dt * 1000); // Convert timestamp to local date\n        const day = date.toLocaleDateString('en-US', { weekday: 'long' });\n\n        // Avoid duplicates for the same day\n        if (!days.has(day)) {\n          days.add(day);\n          temperatures.push(item.main.temp);\n        }\n      });\n\n      // Update chart data\n      this.chartData.labels = Array.from(days);\n      this.chartData.datasets[0].data = temperatures;\n    },\n  },\n  created() {\n    if (this.forecastData && this.forecastData.length > 0) {\n      this.processForecastData();\n    } else {\n      console.error('No forecast data provided');\n    }\n  },\n};\n</script>\n\n<style scoped>\n.forecast-container {\n  padding: 20px;\n  text-align: center;\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\ncanvas {\n  max-width: 100%;\n  height: 400px;\n}\n</style>\n\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAQM,OARNC,UAQM,GAPJC,mBAAA,CAAwC,YAAAC,gBAAA,CAAjCC,MAAA,CAAAC,QAAQ,IAAG,mBAAiB,iBACxBC,KAAA,CAAAC,SAAS,CAACC,QAAQ,IAAIC,IAAI,CAACC,MAAM,Q,cAA5CV,mBAAA,CAEM,OALVW,UAAA,GAIMC,YAAA,CAAiDC,cAAA;IAA3CJ,IAAI,EAAEH,KAAA,CAAAC,SAAS;IAAGO,OAAO,EAAER,KAAA,CAAAS;mEAEnCf,mBAAA,CAEM,OARVgB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAOMf,mBAAA,CAA0B,WAAvB,qBAAmB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}