{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      query: '',\n      weather: {},\n      hourlyData: [],\n      errorMessage: '',\n      savedLocations: []\n    };\n  },\n  computed: {\n    weatherClass() {\n      if (!this.weather.weather) return 'default';\n      const weatherMain = this.weather.weather[0].main.toLowerCase();\n      const classMap = {\n        'clouds': 'clouds',\n        'clear': 'clear',\n        'mist': 'mist',\n        'snow': 'snow',\n        'rain': 'rain',\n        'drizzle': 'drizzle',\n        'thunderstorm': 'thunderstorm'\n      };\n      return classMap[weatherMain] || 'default';\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === 'Enter') {\n        const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${this.query}&units=imperial&appid=${apiKey}`;\n\n        // Reset previous state\n        this.errorMessage = '';\n        this.weather = {};\n        this.hourlyData = [];\n        fetch(apiUrl).then(response => response.json()).then(data => {\n          if (data.cod && data.cod !== 200) {\n            this.errorMessage = data.message || 'City not found';\n            return;\n          }\n          this.weather = data;\n          const hourlyUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${this.query}&units=imperial&appid=${apiKey}`;\n          return fetch(hourlyUrl);\n        }).then(response => response.json()).then(hourlyData => {\n          if (hourlyData && hourlyData.list) {\n            this.hourlyData = hourlyData.list;\n          }\n        }).catch(err => {\n          console.error('Error fetching weather data:', err);\n          this.errorMessage = 'Error fetching weather data';\n        });\n      }\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n      return `${day} ${date} ${month} ${year}`;\n    },\n    saveLocation() {\n      if (this.weather.name) {\n        const locationToSave = {\n          name: this.weather.name,\n          country: this.weather.sys.country,\n          temp: Math.round(this.weather.main.temp),\n          weather: this.weather.weather[0].main\n        };\n\n        // Check if location already exists\n        const exists = this.savedLocations.some(loc => loc.name === locationToSave.name && loc.country === locationToSave.country);\n        if (!exists) {\n          this.savedLocations.push(locationToSave);\n          // Optional: Persist to localStorage\n          localStorage.setItem('savedLocations', JSON.stringify(this.savedLocations));\n          alert(`${locationToSave.name}, ${locationToSave.country} saved!`);\n        } else {\n          alert('This location is already saved!');\n        }\n      }\n    },\n    navigateTo5Day() {\n      // Assuming you're using vue-router\n      this.$router.push({\n        name: 'FiveDayForecast',\n        params: {\n          city: this.weather.name,\n          country: this.weather.sys.country\n        }\n      });\n    },\n    navigateToSavedLocations() {\n      // Retrieve saved locations from localStorage if not already loaded\n      const savedFromStorage = localStorage.getItem('savedLocations');\n      if (savedFromStorage) {\n        this.savedLocations = JSON.parse(savedFromStorage);\n      }\n\n      // Assuming you're using vue-router\n      this.$router.push({\n        name: 'SavedLocations',\n        params: {\n          savedLocations: this.savedLocations\n        }\n      });\n    },\n    showHourlyForecast() {\n      // Assuming you're using vue-router\n      this.$router.push({\n        name: 'HourlyForecast',\n        params: {\n          hourlyData: this.hourlyData,\n          city: this.weather.name\n        }\n      });\n    }\n  },\n  created() {\n    // Load saved locations on component creation\n    const savedFromStorage = localStorage.getItem('savedLocations');\n    if (savedFromStorage) {\n      this.savedLocations = JSON.parse(savedFromStorage);\n    }\n  }\n};","map":{"version":3,"names":["data","query","weather","hourlyData","errorMessage","savedLocations","computed","weatherClass","weatherMain","main","toLowerCase","classMap","methods","fetchWeather","e","key","apiKey","apiUrl","fetch","then","response","json","cod","message","hourlyUrl","list","catch","err","console","error","dateBuilder","d","Date","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","saveLocation","name","locationToSave","country","sys","temp","Math","round","exists","some","loc","push","localStorage","setItem","JSON","stringify","alert","navigateTo5Day","$router","params","city","navigateToSavedLocations","savedFromStorage","getItem","parse","showHourlyForecast","created"],"sources":["/Users/marianfoster/vue-weather/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div :class=\"['main-container', weatherClass]\">\n      <main>\n        <div class=\"search-box\">\n          <input \n            type=\"text\" \n            class=\"search-bar\" \n            placeholder=\"Search...\"\n            v-model=\"query\"\n            @keypress.enter=\"fetchWeather\" \n          />\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </div>\n\n        <div v-if=\"$route.name === 'Home' && weather.main && !errorMessage\" class=\"weather-wrap\">\n          <div class=\"location-box\">\n            <div class=\"location\">{{ weather.name }}, {{ weather.sys.country }}</div>\n            <div class=\"date\">{{ dateBuilder() }}</div>\n          </div>\n       \n          <div class=\"weather-box\">\n            <div class=\"temp\">{{ Math.round(weather.main.temp) }}Â°f</div>\n            <div class=\"weather\">{{ weather.weather[0].main }}</div>\n          </div>\n\n          <div class=\"action-buttons\">\n            <button @click=\"saveLocation\">Save Location</button>\n            <button @click=\"navigateTo5Day\">Show 5-day Forecast</button>\n            <button @click=\"navigateToSavedLocations\">Saved Locations</button>\n          </div>\n\n          <div v-if=\"Array.isArray(hourlyData) && hourlyData.length\">\n            <button @click=\"showHourlyForecast\">Show Hourly Forecast</button>\n          </div>\n        </div>  \n\n        <router-view></router-view> \n      </main>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      query: '',\n      weather: {},\n      hourlyData: [],\n      errorMessage: '',\n      savedLocations: []\n    }\n  },\n  computed: {\n    weatherClass() {\n      if (!this.weather.weather) return 'default';\n      \n      const weatherMain = this.weather.weather[0].main.toLowerCase();\n      const classMap = {\n        'clouds': 'clouds',\n        'clear': 'clear',\n        'mist': 'mist',\n        'snow': 'snow',\n        'rain': 'rain',\n        'drizzle': 'drizzle',\n        'thunderstorm': 'thunderstorm'\n      };\n      \n      return classMap[weatherMain] || 'default';\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === 'Enter') {\n        const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${this.query}&units=imperial&appid=${apiKey}`;\n        \n        // Reset previous state\n        this.errorMessage = '';\n        this.weather = {};\n        this.hourlyData = [];\n        \n        fetch(apiUrl)\n          .then(response => response.json())\n          .then(data => {\n            if (data.cod && data.cod !== 200) {\n              this.errorMessage = data.message || 'City not found';\n              return;\n            }\n            \n            this.weather = data;\n            \n            const hourlyUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${this.query}&units=imperial&appid=${apiKey}`;\n            \n            return fetch(hourlyUrl);\n          })\n          .then(response => response.json())\n          .then(hourlyData => {\n            if (hourlyData && hourlyData.list) {\n              this.hourlyData = hourlyData.list;\n            }\n          })\n          .catch(err => {\n            console.error('Error fetching weather data:', err);\n            this.errorMessage = 'Error fetching weather data';\n          });\n      }\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n      ];\n      const days = [\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n      ];\n\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n\n      return `${day} ${date} ${month} ${year}`;\n    },\n    saveLocation() {\n      if (this.weather.name) {\n        const locationToSave = {\n          name: this.weather.name,\n          country: this.weather.sys.country,\n          temp: Math.round(this.weather.main.temp),\n          weather: this.weather.weather[0].main\n        };\n\n        // Check if location already exists\n        const exists = this.savedLocations.some(\n          loc => loc.name === locationToSave.name && \n                 loc.country === locationToSave.country\n        );\n\n        if (!exists) {\n          this.savedLocations.push(locationToSave);\n          // Optional: Persist to localStorage\n          localStorage.setItem('savedLocations', JSON.stringify(this.savedLocations));\n          alert(`${locationToSave.name}, ${locationToSave.country} saved!`);\n        } else {\n          alert('This location is already saved!');\n        }\n      }\n    },\n    navigateTo5Day() {\n      // Assuming you're using vue-router\n      this.$router.push({ \n        name: 'FiveDayForecast', \n        params: { \n          city: this.weather.name,\n          country: this.weather.sys.country \n        }\n      });\n    },\n    navigateToSavedLocations() {\n      // Retrieve saved locations from localStorage if not already loaded\n      const savedFromStorage = localStorage.getItem('savedLocations');\n      if (savedFromStorage) {\n        this.savedLocations = JSON.parse(savedFromStorage);\n      }\n\n      // Assuming you're using vue-router\n      this.$router.push({ \n        name: 'SavedLocations', \n        params: { savedLocations: this.savedLocations }\n      });\n    },\n    showHourlyForecast() {\n      // Assuming you're using vue-router\n      this.$router.push({ \n        name: 'HourlyForecast', \n        params: { \n          hourlyData: this.hourlyData,\n          city: this.weather.name \n        }\n      });\n    }\n  },\n  created() {\n    // Load saved locations on component creation\n    const savedFromStorage = localStorage.getItem('savedLocations');\n    if (savedFromStorage) {\n      this.savedLocations = JSON.parse(savedFromStorage);\n    }\n  }\n}\n</script>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'montserrat', sans-serif;\n}\n\n.main-container {\n  background-image: url('./assets/default.jpg');\n  background-size: cover;\n  background-position: bottom;\n  transition: 0.4s;\n}\n\n.main-container.default {\n  background-image: url('./assets/default.jpg');\n}\n\n.main-container.clouds {\n  background-image: url('./assets/cloudy.jpg');\n}\n\n.main-container.clear {\n  background-image: url('./assets/sunny.jpg');\n}\n\n.main-container.mist {\n  background-image: url('./assets/fog.jpg');\n}\n\n.main-container.snow {\n  background-image: url('./assets/snow.jpg');\n}\n\n.main-container.rain {\n  background-image: url('./assets/rain.jpg');\n}\n\n.main-container.drizzle {\n  background-image: url('./assets/drizzle.jpg');\n}\n\n.main-container.thunderstorm {\n  background-image: url('./assets/thunderstorm.jpg');\n}\n\nmain {\n  min-height: 100vh;\n  padding: 25px;\n\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0.75));\n}\n\n.search-box {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.search-box .search-bar {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  \n  color: #313131;\n  font-size: 20px;\n\n  appearance: none;\n  border:none;\n  outline: none;\n  background: none;\n\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.5);\n  border-radius: 0px 16px 0px 16px;\n  transition: 0.4s;\n}\n\n.search-box .search-bar:focus {\n  box-shadow: 0px 0px 16px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.75);\n  border-radius: 16px 0px 16px 0px;\n}\n\n.location-box .location {\n  color: #FFF;\n  font-size: 32px;\n  font-weight: 500;\n  text-align: center;\n  text-shadow: 1px 3px rgba(0, 0, 0, 0.25);\n}\n\n.location-box .date {\n  color: #FFF;\n  font-size: 20px;\n  font-weight: 300;\n  font-style: italic;\n  text-align: center;\n}\n\n.weather-box {\n  text-align: center;\n}\n\n.weather-box .temp {\n  display: inline-block;\n  padding: 10px 25px;\n  color: #FFF;\n  font-size: 102px;\n  font-weight: 900;\n\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n  background-color:rgba(255, 255, 255, 0.25);\n  border-radius: 16px;\n  margin: 30px 0px;\n\n  box-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n\n.weather-box .weather {\n  color: #FFF;\n  font-size: 48px;\n  font-weight: 700;\n  font-style: italic;\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n</style>"],"mappings":";;;AA+CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,CAAC,CAAC;MACXC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE;IAClB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACL,OAAO,CAACA,OAAO,EAAE,OAAO,SAAS;MAE3C,MAAMM,WAAU,GAAI,IAAI,CAACN,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACO,IAAI,CAACC,WAAW,CAAC,CAAC;MAC9D,MAAMC,QAAO,GAAI;QACf,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,SAAS;QACpB,cAAc,EAAE;MAClB,CAAC;MAED,OAAOA,QAAQ,CAACH,WAAW,KAAK,SAAS;IAC3C;EACF,CAAC;EACDI,OAAO,EAAE;IACPC,YAAYA,CAACC,CAAC,EAAE;MACd,IAAIA,CAAC,CAACC,GAAE,KAAM,OAAO,EAAE;QACrB,MAAMC,MAAK,GAAI,kCAAkC;QACjD,MAAMC,MAAK,GAAI,qDAAqD,IAAI,CAAChB,KAAK,yBAAyBe,MAAM,EAAE;;QAE/G;QACA,IAAI,CAACZ,YAAW,GAAI,EAAE;QACtB,IAAI,CAACF,OAAM,GAAI,CAAC,CAAC;QACjB,IAAI,CAACC,UAAS,GAAI,EAAE;QAEpBe,KAAK,CAACD,MAAM,EACTE,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACnB,IAAG,IAAK;UACZ,IAAIA,IAAI,CAACsB,GAAE,IAAKtB,IAAI,CAACsB,GAAE,KAAM,GAAG,EAAE;YAChC,IAAI,CAAClB,YAAW,GAAIJ,IAAI,CAACuB,OAAM,IAAK,gBAAgB;YACpD;UACF;UAEA,IAAI,CAACrB,OAAM,GAAIF,IAAI;UAEnB,MAAMwB,SAAQ,GAAI,sDAAsD,IAAI,CAACvB,KAAK,yBAAyBe,MAAM,EAAE;UAEnH,OAAOE,KAAK,CAACM,SAAS,CAAC;QACzB,CAAC,EACAL,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAChB,UAAS,IAAK;UAClB,IAAIA,UAAS,IAAKA,UAAU,CAACsB,IAAI,EAAE;YACjC,IAAI,CAACtB,UAAS,GAAIA,UAAU,CAACsB,IAAI;UACnC;QACF,CAAC,EACAC,KAAK,CAACC,GAAE,IAAK;UACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;UAClD,IAAI,CAACvB,YAAW,GAAI,6BAA6B;QACnD,CAAC,CAAC;MACN;IACF,CAAC;IACD0B,WAAWA,CAAA,EAAG;MACZ,MAAMC,CAAA,GAAI,IAAIC,IAAI,CAAC,CAAC;MACpB,MAAMC,MAAK,GAAI,CACb,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAS,CAChE;MACD,MAAMC,IAAG,GAAI,CACX,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAS,CAC5E;MAED,MAAMC,GAAE,GAAID,IAAI,CAACH,CAAC,CAACK,MAAM,CAAC,CAAC,CAAC;MAC5B,MAAMC,IAAG,GAAIN,CAAC,CAACO,OAAO,CAAC,CAAC;MACxB,MAAMC,KAAI,GAAIN,MAAM,CAACF,CAAC,CAACS,QAAQ,CAAC,CAAC,CAAC;MAClC,MAAMC,IAAG,GAAIV,CAAC,CAACW,WAAW,CAAC,CAAC;MAE5B,OAAO,GAAGP,GAAG,IAAIE,IAAI,IAAIE,KAAK,IAAIE,IAAI,EAAE;IAC1C,CAAC;IACDE,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACzC,OAAO,CAAC0C,IAAI,EAAE;QACrB,MAAMC,cAAa,GAAI;UACrBD,IAAI,EAAE,IAAI,CAAC1C,OAAO,CAAC0C,IAAI;UACvBE,OAAO,EAAE,IAAI,CAAC5C,OAAO,CAAC6C,GAAG,CAACD,OAAO;UACjCE,IAAI,EAAEC,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChD,OAAO,CAACO,IAAI,CAACuC,IAAI,CAAC;UACxC9C,OAAO,EAAE,IAAI,CAACA,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACO;QACnC,CAAC;;QAED;QACA,MAAM0C,MAAK,GAAI,IAAI,CAAC9C,cAAc,CAAC+C,IAAI,CACrCC,GAAE,IAAKA,GAAG,CAACT,IAAG,KAAMC,cAAc,CAACD,IAAG,IAC/BS,GAAG,CAACP,OAAM,KAAMD,cAAc,CAACC,OACxC,CAAC;QAED,IAAI,CAACK,MAAM,EAAE;UACX,IAAI,CAAC9C,cAAc,CAACiD,IAAI,CAACT,cAAc,CAAC;UACxC;UACAU,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrD,cAAc,CAAC,CAAC;UAC3EsD,KAAK,CAAC,GAAGd,cAAc,CAACD,IAAI,KAAKC,cAAc,CAACC,OAAO,SAAS,CAAC;QACnE,OAAO;UACLa,KAAK,CAAC,iCAAiC,CAAC;QAC1C;MACF;IACF,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf;MACA,IAAI,CAACC,OAAO,CAACP,IAAI,CAAC;QAChBV,IAAI,EAAE,iBAAiB;QACvBkB,MAAM,EAAE;UACNC,IAAI,EAAE,IAAI,CAAC7D,OAAO,CAAC0C,IAAI;UACvBE,OAAO,EAAE,IAAI,CAAC5C,OAAO,CAAC6C,GAAG,CAACD;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC;IACDkB,wBAAwBA,CAAA,EAAG;MACzB;MACA,MAAMC,gBAAe,GAAIV,YAAY,CAACW,OAAO,CAAC,gBAAgB,CAAC;MAC/D,IAAID,gBAAgB,EAAE;QACpB,IAAI,CAAC5D,cAAa,GAAIoD,IAAI,CAACU,KAAK,CAACF,gBAAgB,CAAC;MACpD;;MAEA;MACA,IAAI,CAACJ,OAAO,CAACP,IAAI,CAAC;QAChBV,IAAI,EAAE,gBAAgB;QACtBkB,MAAM,EAAE;UAAEzD,cAAc,EAAE,IAAI,CAACA;QAAe;MAChD,CAAC,CAAC;IACJ,CAAC;IACD+D,kBAAkBA,CAAA,EAAG;MACnB;MACA,IAAI,CAACP,OAAO,CAACP,IAAI,CAAC;QAChBV,IAAI,EAAE,gBAAgB;QACtBkB,MAAM,EAAE;UACN3D,UAAU,EAAE,IAAI,CAACA,UAAU;UAC3B4D,IAAI,EAAE,IAAI,CAAC7D,OAAO,CAAC0C;QACrB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDyB,OAAOA,CAAA,EAAG;IACR;IACA,MAAMJ,gBAAe,GAAIV,YAAY,CAACW,OAAO,CAAC,gBAAgB,CAAC;IAC/D,IAAID,gBAAgB,EAAE;MACpB,IAAI,CAAC5D,cAAa,GAAIoD,IAAI,CAACU,KAAK,CAACF,gBAAgB,CAAC;IACpD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}