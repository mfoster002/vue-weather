{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hourly-forecast-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Hourly Forecast\", -1 /* HOISTED */)), $props.hourlyData && $props.hourlyData.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_Bar, {\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"No data available for hourly forecast.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$props","hourlyData","length","_hoisted_2","_createVNode","_component_Bar","data","$data","chartData","options","chartOptions","_hoisted_3","_cache"],"sources":["/Users/marianfoster/vue-weather/src/components/Hourly.vue"],"sourcesContent":["<template>\n  <div class=\"hourly-forecast-container\">\n    <h2>Hourly Forecast</h2>\n    <div v-if=\"hourlyData && hourlyData.length > 0\">\n      <Bar \n        :data=\"chartData\" \n        :options=\"chartOptions\" \n      />\n    </div>\n    <div v-else>\n      <p>No data available for hourly forecast.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  Title, \n  Tooltip, \n  Legend, \n  BarElement, \n  CategoryScale, \n  LinearScale\n);\n\nexport default {\n  name: 'HourlyForecast',\n  components: {\n    Bar,\n  },\n  props: {\n    hourlyData: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Hourly Temperature (°F)',\n            data: [],\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n          },\n          title: {\n            display: true,\n            text: 'Hourly Temperature Forecast',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Hour',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (°F)',\n            },\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  },\n  watch: {\n    hourlyData: {\n      immediate: true,\n      handler(newData) {\n        if (newData && newData.length > 0) {\n          this.processHourlyData(newData);\n        }\n      }\n    }\n  },\n  methods: {\n    processHourlyData(data) {\n      // Limit to first 12 hours\n      const limitedData = data.slice(0, 12);\n      \n      // Extract hour labels and temperatures\n      this.chartData.labels = limitedData.map((item) => {\n        const date = new Date(item.dt * 1000);\n        return `${date.getHours()}:00`;\n      });\n      \n      this.chartData.datasets[0].data = limitedData.map((item) => item.temp);\n    },\n  },\n}\n</script>\n\n<style scoped>\n.hourly-forecast-container {\n  padding: 20px;\n  text-align: center;\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\ncanvas {\n  max-width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAA2B;;EADxCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAWM,OAXNC,UAWM,G,0BAVJC,mBAAA,CAAwB,YAApB,iBAAe,sBACRC,MAAA,CAAAC,UAAU,IAAID,MAAA,CAAAC,UAAU,CAACC,MAAM,Q,cAA1CL,mBAAA,CAKM,OARVM,UAAA,GAIMC,YAAA,CAGEC,cAAA;IAFCC,IAAI,EAAEC,KAAA,CAAAC,SAAS;IACfC,OAAO,EAAEF,KAAA,CAAAG;mEAGdb,mBAAA,CAEM,OAXVc,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAUMb,mBAAA,CAA6C,WAA1C,wCAAsC,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}