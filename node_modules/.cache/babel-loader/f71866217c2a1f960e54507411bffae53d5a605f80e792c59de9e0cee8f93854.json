{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'MySavedLocations',\n  setup() {\n    const router = useRouter();\n    const savedLocations = ref([]); // This will store the saved locations\n\n    // Load saved locations from localStorage on mount\n    onMounted(() => {\n      const saved = JSON.parse(localStorage.getItem('savedLocations')) || [];\n      savedLocations.value = saved;\n    });\n\n    // Delete a location from the saved list\n    const deleteLocation = index => {\n      savedLocations.value.splice(index, 1);\n      // Update the saved locations in localStorage\n      localStorage.setItem('savedLocations', JSON.stringify(savedLocations.value));\n    };\n\n    // View forecast for a selected location\n    const viewForecast = location => {\n      router.push({\n        name: 'forecast',\n        query: {\n          location\n        }\n      }); // Assuming your forecast route accepts location as a query parameter\n    };\n\n    // Go back to the previous page\n    const goBack = () => {\n      router.go(-1);\n    };\n    return {\n      savedLocations,\n      deleteLocation,\n      viewForecast,\n      goBack\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRouter","name","setup","router","savedLocations","saved","JSON","parse","localStorage","getItem","value","deleteLocation","index","splice","setItem","stringify","viewForecast","location","push","query","goBack","go"],"sources":["/Users/marianfoster/vue-weather/src/views/MySavedLocations.vue"],"sourcesContent":["<template>\n    <div class=\"saved-locations-container\">\n      <h2>My Saved Locations</h2>\n  \n      <!-- Display the list of saved locations -->\n      <div v-if=\"savedLocations.length > 0\">\n        <ul>\n          <li v-for=\"(location, index) in savedLocations\" :key=\"index\">\n            {{ location }}\n            <button @click=\"deleteLocation(index)\">Delete</button>\n            <button @click=\"viewForecast(location)\">View Forecast</button>\n          </li>\n        </ul>\n      </div>\n      \n      <!-- No locations saved message -->\n      <div v-else>\n        <p>No locations saved.</p>\n      </div>\n  \n      <!-- Go back button -->\n      <button @click=\"goBack\">Go Back</button>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted } from 'vue';\n  import { useRouter } from 'vue-router';\n  \n  export default {\n    name: 'MySavedLocations',\n    setup() {\n      const router = useRouter();\n      const savedLocations = ref([]); // This will store the saved locations\n      \n      // Load saved locations from localStorage on mount\n      onMounted(() => {\n        const saved = JSON.parse(localStorage.getItem('savedLocations')) || [];\n        savedLocations.value = saved;\n      });\n  \n      // Delete a location from the saved list\n      const deleteLocation = (index) => {\n        savedLocations.value.splice(index, 1);\n        // Update the saved locations in localStorage\n        localStorage.setItem('savedLocations', JSON.stringify(savedLocations.value));\n      };\n  \n      // View forecast for a selected location\n      const viewForecast = (location) => {\n        router.push({ name: 'forecast', query: { location } }); // Assuming your forecast route accepts location as a query parameter\n      };\n  \n      // Go back to the previous page\n      const goBack = () => {\n        router.go(-1);\n      };\n  \n      return {\n        savedLocations,\n        deleteLocation,\n        viewForecast,\n        goBack,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .saved-locations-container {\n    padding: 20px;\n    text-align: center;\n  }\n  \n  h2 {\n    margin-bottom: 20px;\n  }\n  \n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n  \n  li {\n    margin: 10px 0;\n  }\n  \n  button {\n    margin-left: 10px;\n    padding: 5px 10px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  button:hover {\n    background-color: #45a049;\n  }\n  </style>\n  "],"mappings":";AA0BE,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIH,SAAS,CAAC,CAAC;IAC1B,MAAMI,cAAa,GAAIN,GAAG,CAAC,EAAE,CAAC,EAAE;;IAEhC;IACAC,SAAS,CAAC,MAAM;MACd,MAAMM,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE;MACtEL,cAAc,CAACM,KAAI,GAAIL,KAAK;IAC9B,CAAC,CAAC;;IAEF;IACA,MAAMM,cAAa,GAAKC,KAAK,IAAK;MAChCR,cAAc,CAACM,KAAK,CAACG,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;MACrC;MACAJ,YAAY,CAACM,OAAO,CAAC,gBAAgB,EAAER,IAAI,CAACS,SAAS,CAACX,cAAc,CAACM,KAAK,CAAC,CAAC;IAC9E,CAAC;;IAED;IACA,MAAMM,YAAW,GAAKC,QAAQ,IAAK;MACjCd,MAAM,CAACe,IAAI,CAAC;QAAEjB,IAAI,EAAE,UAAU;QAAEkB,KAAK,EAAE;UAAEF;QAAS;MAAE,CAAC,CAAC,EAAE;IAC1D,CAAC;;IAED;IACA,MAAMG,MAAK,GAAIA,CAAA,KAAM;MACnBjB,MAAM,CAACkB,EAAE,CAAC,CAAC,CAAC,CAAC;IACf,CAAC;IAED,OAAO;MACLjB,cAAc;MACdO,cAAc;MACdK,YAAY;MACZI;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}