{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      api_key: \"6c07b7050c30876a4e88cfbb4dee8dc3\",\n      url_base: \"https://api.openweathermap.org/data/2.5/\",\n      query: \"\",\n      weather: {},\n      geoData: {},\n      // City, state, and country data\n      savedLocations: [] // Saved locations list\n    };\n  },\n  computed: {\n    weatherClass() {\n      const weatherCondition = this.weather.weather ? this.weather.weather[0].main.toLowerCase() : \"\";\n      const conditionMap = {\n        clear: \"clear\",\n        clouds: \"clouds\",\n        rain: \"rain\",\n        drizzle: \"drizzle\",\n        thunderstorm: \"thunderstorm\",\n        snow: \"snow\",\n        mist: \"mist\",\n        haze: \"mist\"\n      };\n      return conditionMap[weatherCondition] || \"default\";\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === \"Enter\") {\n        fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`).then(res => res.json()).then(this.setResults);\n      }\n    },\n    setResults(results) {\n      this.weather = results;\n      this.fetchGeoData(); // Fetch detailed location data\n    },\n    fetchGeoData() {\n      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.query}&limit=1&appid=${this.api_key}`).then(res => res.json()).then(data => {\n        if (data[0]) {\n          const {\n            name,\n            state,\n            country\n          } = data[0];\n          this.geoData = {\n            name,\n            state,\n            country\n          };\n        }\n      });\n    },\n    saveLocation() {\n      if (this.weather.name && !this.savedLocations.includes(this.weather.name)) {\n        this.savedLocations.push(this.weather.name);\n      }\n    },\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n      return `${day} ${date} ${month} ${year}`;\n    }\n  }\n};","map":{"version":3,"names":["name","data","api_key","url_base","query","weather","geoData","savedLocations","computed","weatherClass","weatherCondition","main","toLowerCase","conditionMap","clear","clouds","rain","drizzle","thunderstorm","snow","mist","haze","methods","fetchWeather","e","key","fetch","then","res","json","setResults","results","fetchGeoData","state","country","saveLocation","includes","push","navigateTo","route","$router","dateBuilder","d","Date","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear"],"sources":["/Users/marianfoster/vue-weather/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" :class=\"weatherClass\">\n    <main>\n      <!-- Search Bar -->\n      <div id=\"search\">\n        <input\n          type=\"text\"\n          class=\"search-bar\"\n          placeholder=\"Enter a city...\"\n          v-model=\"query\"\n          @keypress=\"fetchWeather\"\n        />\n      </div>\n\n      <!-- Weather Information -->\n      <div class=\"weather-container\" v-if=\"weather.main\">\n        <div id=\"location\">\n          <h1>\n            {{ weather.name }},\n            <span v-if=\"geoData.state\">{{ geoData.state }},</span>\n            {{ geoData.country }}\n          </h1>\n          <p>{{ dateBuilder() }}</p>\n        </div>\n\n        <div id=\"current-weather\">\n          <h2>{{ Math.round(weather.main.temp) }}Â°F</h2>\n          <p>{{ weather.weather[0].main }}</p>\n        </div>\n\n        <button @click=\"saveLocation\" class=\"action-button\">Save Location</button>\n\n        <!-- Saved Locations -->\n        <div id=\"saved-locations\" v-if=\"savedLocations.length\">\n          <h3>Saved Locations:</h3>\n          <ul>\n            <li v-for=\"(location, index) in savedLocations\" :key=\"index\">\n              {{ location }}\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Navigation Buttons -->\n      <div id=\"navigation\">\n        <button class=\"nav-button\" @click=\"navigateTo('/')\">Home</button>\n        <button class=\"nav-button\" @click=\"navigateTo('/hourly')\">Hourly</button>\n        <button class=\"nav-button\" @click=\"navigateTo('/5day')\">5-Day Forecast</button>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      api_key: \"6c07b7050c30876a4e88cfbb4dee8dc3\",\n      url_base: \"https://api.openweathermap.org/data/2.5/\",\n      query: \"\",\n      weather: {},\n      geoData: {}, // City, state, and country data\n      savedLocations: [], // Saved locations list\n    };\n  },\n  computed: {\n    weatherClass() {\n      const weatherCondition = this.weather.weather\n        ? this.weather.weather[0].main.toLowerCase()\n        : \"\";\n      const conditionMap = {\n        clear: \"clear\",\n        clouds: \"clouds\",\n        rain: \"rain\",\n        drizzle: \"drizzle\",\n        thunderstorm: \"thunderstorm\",\n        snow: \"snow\",\n        mist: \"mist\",\n        haze: \"mist\",\n      };\n      return conditionMap[weatherCondition] || \"default\";\n    },\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === \"Enter\") {\n        fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`)\n          .then((res) => res.json())\n          .then(this.setResults);\n      }\n    },\n    setResults(results) {\n      this.weather = results;\n      this.fetchGeoData(); // Fetch detailed location data\n    },\n    fetchGeoData() {\n      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.query}&limit=1&appid=${this.api_key}`)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data[0]) {\n            const { name, state, country } = data[0];\n            this.geoData = { name, state, country };\n          }\n        });\n    },\n    saveLocation() {\n      if (this.weather.name && !this.savedLocations.includes(this.weather.name)) {\n        this.savedLocations.push(this.weather.name);\n      }\n    },\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ];\n      const days = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n      ];\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n      return `${day} ${date} ${month} ${year}`;\n    },\n  },\n};\n</script>\n\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'montserrat', sans-serif;\n}\n\n#app {\n  background-image: url('./assets/default.jpg');\n  background-size: cover;\n  background-position: bottom;\n  transition: 0.4s;\n}\n\n#app.default {\n  background-image: url('./assets/default.jpg');\n}\n\n#app.clouds {\n  background-image: url('./assets/cloudy.jpg');\n}\n\n#app.clear {\n  background-image: url('./assets/sunny.jpg');\n}\n\n#app.mist {\n  background-image: url('./assets/fog.jpg');\n}\n\n#app.snow {\n  background-image: url('./assets/snow.jpg');\n}\n\n#app.rain {\n  background-image: url('./assets/rain.jpg');\n}\n\n#app.drizzle {\n  background-image: url('./assets/drizzle.jpg');\n}\n\n#app.thunderstorm {\n  background-image: url('./assets/thunderstorm.jpg');\n}\n\nmain {\n  min-height: 100vh;\n  padding: 25px;\n\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0.75));\n}\n\n.search-box {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.search-box .search-bar {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  \n  color: #313131;\n  font-size: 20px;\n\n  appearance: none;\n  border:none;\n  outline: none;\n  background: none;\n\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.5);\n  border-radius: 0px 16px 0px 16px;\n  transition: 0.4s;\n}\n\n.search-box .search-bar:focus {\n  box-shadow: 0px 0px 16px rgba(0, 0, 0, 0.25);\n  background-color: rgba(255, 255, 255, 0.75);\n  border-radius: 16px 0px 16px 0px;\n}\n\n.location-box .location {\n  color: #FFF;\n  font-size: 32px;\n  font-weight: 500;\n  text-align: center;\n  text-shadow: 1px 3px rgba(0, 0, 0, 0.25);\n}\n\n.location-box .date {\n  color: #FFF;\n  font-size: 20px;\n  font-weight: 300;\n  font-style: italic;\n  text-align: center;\n}\n\n.weather-box {\n  text-align: center;\n}\n\n.weather-box .temp {\n  display: inline-block;\n  padding: 10px 25px;\n  color: #FFF;\n  font-size: 102px;\n  font-weight: 900;\n\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n  background-color:rgba(255, 255, 255, 0.25);\n  border-radius: 16px;\n  margin: 30px 0px;\n\n  box-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n\n.weather-box .weather {\n  color: #FFF;\n  font-size: 48px;\n  font-weight: 700;\n  font-style: italic;\n  text-shadow: 3px 6px rgba(0, 0, 0, 0.25);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}