{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"forecast-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Line = _resolveComponent(\"Line\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($props.location) + \" - 5-Day Forecast\", 1 /* TEXT */), $data.chartData.datasets[0].data.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when data is available \"), _createVNode(_component_Line, {\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Loading forecast...\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","location","$data","chartData","datasets","data","length","_hoisted_2","_createCommentVNode","_createVNode","_component_Line","options","chartOptions","_hoisted_3","_cache"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div class=\"forecast-container\">\n    <h2>{{ location }} - 5-Day Forecast</h2>\n    <div v-if=\"chartData.datasets[0].data.length > 0\">\n      <!-- Render the chart only when data is available -->\n      <Line :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <p>Loading forecast...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport HourlyForecast from './components/Hourly.vue';\nimport FiveDayForecast from './components/FiveDayForecast.vue';\n\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\n// Register the required components in Chart.js\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\nexport default {\n  name: 'FiveDayForecast',\n  components: {\n    Ba,\n  },\n  props: {\n    forecastData: Array, // Receive forecast data from parent\n    location: String,    // Receive location from parent\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [], // will hold the days\n        datasets: [\n          {\n            label: 'Temperature (°F)', // Label for the dataset\n            data: [], // Temperature data points for the 5 days\n            fill: false, // No fill under the line\n            borderColor: 'rgb(75, 192, 192)', // Line color\n            tension: 0.1, // Line smoothness\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Day',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (°F)',\n            },\n            min: 0,\n            max: 100, // Adjust according to expected temperature range\n          },\n        },\n      },\n    };\n  },\n  methods: {\n    processForecastData() {\n      const temperatures = [];\n      const days = [];\n\n      // Loop through the forecast data and collect temperatures for the 5 days\n      this.forecastData.forEach((item) => {\n        const date = new Date(item.dt * 1000); // Convert to local date\n        const day = date.getDay();\n\n        // Collect data for the next 5 days\n        if (!days.includes(day)) {\n          days.push(day);\n          temperatures.push(item.main.temp);\n        }\n      });\n\n      // Update chart data\n      this.chartData.labels = days.map((dayIndex) => {\n        const date = new Date();\n        date.setDate(date.getDate() + dayIndex);\n        return date.toLocaleDateString('en-US', { weekday: 'long' });\n      });\n\n      this.chartData.datasets[0].data = temperatures;\n    },\n  },\n  created() {\n    if (this.forecastData.length > 0) {\n      this.processForecastData(); // Process forecast data passed from the parent\n    } else {\n      console.error('No forecast data available');\n    }\n  },\n};\n</script>\n\n<style scoped>\n.forecast-container {\n  padding: 20px;\n  text-align: center;\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\ncanvas {\n  max-width: 100%;\n  height: 400px; \n}\n</style>\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CASM,OATNC,UASM,GARJC,mBAAA,CAAwC,YAAAC,gBAAA,CAAjCC,MAAA,CAAAC,QAAQ,IAAG,mBAAiB,iBACxBC,KAAA,CAAAC,SAAS,CAACC,QAAQ,IAAIC,IAAI,CAACC,MAAM,Q,cAA5CV,mBAAA,CAGM,OANVW,UAAA,GAIMC,mBAAA,kDAAqD,EACrDC,YAAA,CAAkDC,eAAA;IAA3CL,IAAI,EAAEH,KAAA,CAAAC,SAAS;IAAGQ,OAAO,EAAET,KAAA,CAAAU;mEAEpChB,mBAAA,CAEM,OATViB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAQMhB,mBAAA,CAA0B,WAAvB,qBAAmB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}