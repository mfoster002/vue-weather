{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n// Import vue-chartjs and necessary chart.js components\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from 'chart.js';\n\n// Register the required components in Chart.js\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\nexport default {\n  name: 'FiveDayForecast',\n  components: {\n    Line\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        // will hold the days\n        datasets: [{\n          label: 'Temperature (째F)',\n          // Label for the dataset\n          data: [],\n          // Temperature data points for the 5 days\n          fill: false,\n          // No fill under the line\n          borderColor: 'rgb(75, 192, 192)',\n          // Line color\n          tension: 0.1 // Line smoothness\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Day'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (째F)'\n            },\n            min: 0,\n            max: 100 // Adjust according to expected temperature range\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    fetchForecast() {\n      const api_key = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const url_base = 'https://api.openweathermap.org/data/2.5/forecast';\n\n      // Make the API request for the 5-day forecast\n      fetch(`${url_base}?q=${this.$route.query.city}&units=imperial&APPID=${api_key}`).then(res => res.json()).then(data => {\n        // Prepare data for the chart\n        const temperatures = [];\n        const days = [];\n\n        // Loop through the forecast data (e.g., every 3 hours)\n        data.list.forEach(item => {\n          const date = new Date(item.dt * 1000); // Convert to local date\n          const day = date.getDay();\n\n          // Collect data for the next 5 days\n          if (!days.includes(day)) {\n            days.push(day);\n            temperatures.push(item.main.temp);\n          }\n        });\n\n        // Update chart data\n        this.chartData.labels = days.map(dayIndex => {\n          const date = new Date();\n          date.setDate(date.getDate() + dayIndex);\n          return date.toLocaleDateString('en-US', {\n            weekday: 'long'\n          });\n        });\n        this.chartData.datasets[0].data = temperatures;\n      }).catch(err => console.error('Error fetching forecast:', err));\n    }\n  },\n  created() {\n    this.fetchForecast(); // Fetch the forecast data when the component is created\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","CategoryScale","LinearScale","register","name","components","data","chartData","labels","datasets","label","fill","borderColor","tension","chartOptions","responsive","plugins","legend","position","scales","x","title","display","text","y","min","max","methods","fetchForecast","api_key","url_base","fetch","$route","query","city","then","res","json","temperatures","days","list","forEach","item","date","Date","dt","day","getDay","includes","push","main","temp","map","dayIndex","setDate","getDate","toLocaleDateString","weekday","catch","err","console","error","created"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div class=\"forecast-container\">\n    <h2>5-Day Forecast</h2>\n    <div v-if=\"chartData.datasets[0].data.length > 0\">\n      <!-- Render the chart only when data is available -->\n      <Line :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <p>Loading forecast...</p>\n    </div>\n  </div>\n</template>\n\n<script>\n// Import vue-chartjs and necessary chart.js components\nimport { Line } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\n// Register the required components in Chart.js\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\nexport default {\n  name: 'FiveDayForecast',\n  components: {\n    Line,\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [], // will hold the days\n        datasets: [\n          {\n            label: 'Temperature (째F)', // Label for the dataset\n            data: [], // Temperature data points for the 5 days\n            fill: false, // No fill under the line\n            borderColor: 'rgb(75, 192, 192)', // Line color\n            tension: 0.1, // Line smoothness\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Day',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (째F)',\n            },\n            min: 0,\n            max: 100, // Adjust according to expected temperature range\n          },\n        },\n      },\n    };\n  },\n  methods: {\n    fetchForecast() {\n      const api_key = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const url_base = 'https://api.openweathermap.org/data/2.5/forecast';\n\n      // Make the API request for the 5-day forecast\n      fetch(`${url_base}?q=${this.$route.query.city}&units=imperial&APPID=${api_key}`)\n        .then((res) => res.json())\n        .then((data) => {\n          // Prepare data for the chart\n          const temperatures = [];\n          const days = [];\n\n          // Loop through the forecast data (e.g., every 3 hours)\n          data.list.forEach((item) => {\n            const date = new Date(item.dt * 1000); // Convert to local date\n            const day = date.getDay();\n\n            // Collect data for the next 5 days\n            if (!days.includes(day)) {\n              days.push(day);\n              temperatures.push(item.main.temp);\n            }\n          });\n\n          // Update chart data\n          this.chartData.labels = days.map((dayIndex) => {\n            const date = new Date();\n            date.setDate(date.getDate() + dayIndex);\n            return date.toLocaleDateString('en-US', { weekday: 'long' });\n          });\n\n          this.chartData.datasets[0].data = temperatures;\n        })\n        .catch((err) => console.error('Error fetching forecast:', err));\n    },\n  },\n  created() {\n    this.fetchForecast(); // Fetch the forecast data when the component is created\n  },\n};\n</script>\n\n<style scoped>\n.forecast-container {\n  padding: 20px;\n  text-align: center;\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\ncanvas {\n  max-width: 100%;\n  height: 400px; /* Adjust the height as needed */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}