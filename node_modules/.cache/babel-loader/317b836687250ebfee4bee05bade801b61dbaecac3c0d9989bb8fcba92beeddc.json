{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Hourly Forecast\", -1 /* HOISTED */)), _ctx.chartData?.datasets?.[0]?.data?.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Render the chart when data is available \"), _createVNode(_component_Bar, {\n    data: _ctx.chartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" Fallback for empty or loading data \"), _cache[0] || (_cache[0] = _createElementVNode(\"p\", null, \"Loading hourly forecast data...\", -1 /* HOISTED */))]))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_ctx","chartData","datasets","data","length","_hoisted_1","_createCommentVNode","_createVNode","_component_Bar","options","chartOptions","_hoisted_2"],"sources":["/Users/marianfoster/vue-weather/src/components/Hourly.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Hourly Forecast</h2>\n    <div v-if=\"chartData?.datasets?.[0]?.data?.length > 0\">\n      <!-- Render the chart when data is available -->\n      <Bar :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <!-- Fallback for empty or loading data -->\n      <p>Loading hourly forecast data...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from \"vue-chartjs\";\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from \"chart.js\";\nimport { defineComponent, ref, watch } from \"vue\";\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default defineComponent({\n  name: \"HourlyForecast\",\n  components: {\n    BarChart: Bar,\n  },\n  props: {\n    hourlyData: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [\n        {\n          label: \"Temperature (Â°F)\",\n          data: [],\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    });\n\n    const chartOptions = ref({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n        },\n        title: {\n          display: true,\n          text: \"Hourly Temperature\",\n        },\n      },\n    });\n\n    const updateChartData = () => {\n      if (props.hourlyData.length > 0) {\n        const labels = props.hourlyData.slice(0, 12).map((item) => {\n          const date = new Date(item.dt * 1000);\n          return `${date.getHours()}:00`;\n        });\n\n        const temperatures = props.hourlyData.slice(0, 12).map((item) => item.temp);\n\n        chartData.value.labels = labels;\n        chartData.value.datasets[0].data = temperatures;\n      }\n    };\n\n    // Watch for changes in `hourlyData` to update the chart dynamically\n    watch(\n      () => props.hourlyData,\n      () => {\n        updateChartData();\n      },\n      { immediate: true }\n    );\n\n    return { chartData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\nh2 {\n  text-align: center;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAUM,c,0BATJC,mBAAA,CAAwB,YAApB,iBAAe,sBACRC,IAAA,CAAAC,SAAS,EAAEC,QAAQ,OAAOC,IAAI,EAAEC,MAAM,Q,cAAjDN,mBAAA,CAGM,OANVO,UAAA,GAIMC,mBAAA,6CAAgD,EAChDC,YAAA,CAAiDC,cAAA;IAA3CL,IAAI,EAAEH,IAAA,CAAAC,SAAS;IAAGQ,OAAO,EAAET,IAAA,CAAAU;mEAEnCZ,mBAAA,CAGM,OAVVa,UAAA,GAQML,mBAAA,wCAA2C,E,0BAC3CP,mBAAA,CAAsC,WAAnC,iCAA+B,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}