{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, watch } from 'vue';\nimport Chart from 'chart.js/auto'; // Make sure you have Chart.js installed\n\nexport default {\n  name: 'FiveDayForecast',\n  setup() {\n    const city = ref('London'); // Default city is set to London\n    const chartData = ref(null);\n\n    // Fetch data for 5-day forecast based on city\n    const fetchForecastData = async () => {\n      const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city.value}&cnt=5&units=metric&appid=${apiKey}`;\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Process the forecast data for the chart\n        chartData.value = data.list.map(item => ({\n          date: item.dt_txt,\n          temp: item.main.temp\n        }));\n\n        // Render the chart after fetching the data\n        renderChart();\n      } catch (error) {\n        console.error('Error fetching forecast data:', error);\n      }\n    };\n\n    // Render the chart\n    const renderChart = () => {\n      if (chartData.value) {\n        const ctx = document.getElementById('forecastChart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: chartData.value.map(item => item.date),\n            datasets: [{\n              label: 'Temperature (°C)',\n              data: chartData.value.map(item => item.temp),\n              borderColor: 'rgba(75, 192, 192, 1)',\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            scales: {\n              x: {\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 5\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Fetch data on mount with the default city\n    onMounted(() => {\n      fetchForecastData();\n    });\n\n    // Watch for changes in the city input to refetch data\n    watch(city, fetchForecastData);\n    return {\n      city,\n      chartData,\n      fetchForecastData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","Chart","name","setup","city","chartData","fetchForecastData","apiKey","url","value","response","fetch","data","json","list","map","item","date","dt_txt","temp","main","renderChart","error","console","ctx","document","getElementById","type","labels","datasets","label","borderColor","fill","options","responsive","scales","x","ticks","autoSkip","maxTicksLimit"],"sources":["/Users/marianfoster/vue-weather/src/components/FiveDayForecast.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>5 Day Forecast</h1>\n\n    <!-- Search Bar for Dynamic Location -->\n    <div>\n      <input\n        v-model=\"city\"\n        @keyup.enter=\"fetchForecastData\"\n        type=\"text\"\n        placeholder=\"Enter city name\"\n      />\n      <button @click=\"fetchForecastData\">Get Forecast</button>\n    </div>\n\n    <canvas id=\"forecastChart\"></canvas>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue';\nimport Chart from 'chart.js/auto'; // Make sure you have Chart.js installed\n\nexport default {\n  name: 'FiveDayForecast',\n  setup() {\n    const city = ref('London'); // Default city is set to London\n    const chartData = ref(null);\n\n    // Fetch data for 5-day forecast based on city\n    const fetchForecastData = async () => {\n      const apiKey = '6c07b7050c30876a4e88cfbb4dee8dc3';\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city.value}&cnt=5&units=metric&appid=${apiKey}`;\n\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Process the forecast data for the chart\n        chartData.value = data.list.map(item => ({\n          date: item.dt_txt,\n          temp: item.main.temp,\n        }));\n\n        // Render the chart after fetching the data\n        renderChart();\n      } catch (error) {\n        console.error('Error fetching forecast data:', error);\n      }\n    };\n\n    // Render the chart\n    const renderChart = () => {\n      if (chartData.value) {\n        const ctx = document.getElementById('forecastChart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: chartData.value.map(item => item.date),\n            datasets: [\n              {\n                label: 'Temperature (°C)',\n                data: chartData.value.map(item => item.temp),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            scales: {\n              x: {\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 5,\n                },\n              },\n            },\n          },\n        });\n      }\n    };\n\n    // Fetch data on mount with the default city\n    onMounted(() => {\n      fetchForecastData();\n    });\n\n    // Watch for changes in the city input to refetch data\n    watch(city, fetchForecastData);\n\n    return {\n      city,\n      chartData,\n      fetchForecastData,\n    };\n  },\n};\n</script>\n\n<style scoped>\n#forecastChart {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";AAoBA,SAASA,GAAG,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAC3C,OAAOC,KAAI,MAAO,eAAe,EAAE;;AAEnC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIN,GAAG,CAAC,QAAQ,CAAC,EAAE;IAC5B,MAAMO,SAAQ,GAAIP,GAAG,CAAC,IAAI,CAAC;;IAE3B;IACA,MAAMQ,iBAAgB,GAAI,MAAAA,CAAA,KAAY;MACpC,MAAMC,MAAK,GAAI,kCAAkC;MACjD,MAAMC,GAAE,GAAI,sDAAsDJ,IAAI,CAACK,KAAK,6BAA6BF,MAAM,EAAE;MAEjH,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAACH,GAAG,CAAC;QACjC,MAAMI,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACAR,SAAS,CAACI,KAAI,GAAIG,IAAI,CAACE,IAAI,CAACC,GAAG,CAACC,IAAG,KAAM;UACvCC,IAAI,EAAED,IAAI,CAACE,MAAM;UACjBC,IAAI,EAAEH,IAAI,CAACI,IAAI,CAACD;QAClB,CAAC,CAAC,CAAC;;QAEH;QACAE,WAAW,CAAC,CAAC;MACf,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;IACA,MAAMD,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAIhB,SAAS,CAACI,KAAK,EAAE;QACnB,MAAMe,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;QACpD,IAAIzB,KAAK,CAACuB,GAAG,EAAE;UACbG,IAAI,EAAE,MAAM;UACZf,IAAI,EAAE;YACJgB,MAAM,EAAEvB,SAAS,CAACI,KAAK,CAACM,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC;YAC9CY,QAAQ,EAAE,CACR;cACEC,KAAK,EAAE,kBAAkB;cACzBlB,IAAI,EAAEP,SAAS,CAACI,KAAK,CAACM,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACG,IAAI,CAAC;cAC5CY,WAAW,EAAE,uBAAuB;cACpCC,IAAI,EAAE;YACR,CAAC;UAEL,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,KAAK,EAAE;kBACLC,QAAQ,EAAE,IAAI;kBACdC,aAAa,EAAE;gBACjB;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACAxC,SAAS,CAAC,MAAM;MACdO,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;;IAEF;IACAN,KAAK,CAACI,IAAI,EAAEE,iBAAiB,CAAC;IAE9B,OAAO;MACLF,IAAI;MACJC,SAAS;MACTC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}