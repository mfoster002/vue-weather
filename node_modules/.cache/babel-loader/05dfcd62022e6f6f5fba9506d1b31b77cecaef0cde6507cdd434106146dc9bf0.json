{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default defineComponent({\n  name: \"HourlyForecast\",\n  components: {\n    Bar\n  },\n  props: {\n    hourlyData: {\n      type: Array,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [{\n        label: \"Temperature (°F)\",\n        data: [],\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n        borderColor: \"rgba(75, 192, 192, 1)\",\n        borderWidth: 1\n      }]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true\n        },\n        title: {\n          display: true,\n          text: \"Hourly Temperature\"\n        }\n      }\n    });\n\n    // Update chart data when component is mounted\n    onMounted(() => {\n      updateChartData();\n    });\n    function updateChartData() {\n      if (props.hourlyData && props.hourlyData.length > 0) {\n        const labels = props.hourlyData.slice(0, 12).map(item => {\n          const date = new Date(item.dt * 1000); // Convert timestamp to date\n          return `${date.getHours()}:00`;\n        });\n        const temperatures = props.hourlyData.slice(0, 12).map(item => item.temp);\n        chartData.value.labels = labels;\n        chartData.value.datasets[0].data = temperatures;\n      }\n    }\n    return {\n      chartData,\n      chartOptions\n    };\n  }\n});","map":{"version":3,"names":["Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","defineComponent","ref","onMounted","register","name","components","props","hourlyData","type","Array","required","setup","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","chartOptions","responsive","plugins","legend","display","title","text","updateChartData","length","slice","map","item","date","Date","dt","getHours","temperatures","temp","value"],"sources":["/Users/marianfoster/vue-weather/src/components/Hourly.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Hourly Forecast</h2>\n    <div v-if=\"hourlyData && hourlyData.length > 0\">\n      <Bar :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n    <div v-else>\n      <p>No data available for hourly forecast.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default defineComponent({\n  name: \"HourlyForecast\",\n  components: {\n    Bar,\n  },\n  props: {\n    hourlyData: {\n      type: Array,\n      required: true,\n    },\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [\n        {\n          label: \"Temperature (°F)\",\n          data: [],\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    });\n\n    const chartOptions = ref({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n        },\n        title: {\n          display: true,\n          text: \"Hourly Temperature\",\n        },\n      },\n    });\n\n    // Update chart data when component is mounted\n    onMounted(() => {\n      updateChartData();\n    });\n\n    function updateChartData() {\n      if (props.hourlyData && props.hourlyData.length > 0) {\n        const labels = props.hourlyData.slice(0, 12).map((item) => {\n          const date = new Date(item.dt * 1000); // Convert timestamp to date\n          return `${date.getHours()}:00`;\n        });\n\n        const temperatures = props.hourlyData.slice(0, 12).map((item) => item.temp);\n\n        chartData.value.labels = labels;\n        chartData.value.datasets[0].data = temperatures;\n      }\n    }\n\n    return { chartData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\nh2 {\n  text-align: center;\n}\n</style>\n\n"],"mappings":";AAaA,SAASA,GAAE,QAAS,aAAa;AACjC,SAASC,KAAI,IAAKC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAU,QAAS,UAAU;AAC3G,SAASC,eAAe,EAAEC,GAAG,EAAEC,SAAQ,QAAS,KAAK;;AAErD;AACAT,OAAO,CAACU,QAAQ,CAACT,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,CAAC;AAEhF,eAAeC,eAAe,CAAC;EAC7BI,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVd;EACF,CAAC;EACDe,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,SAAQ,GAAIX,GAAG,CAAC;MACpBY,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,kBAAkB;QACzBC,IAAI,EAAE,EAAE;QACRC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,uBAAuB;QACpCC,WAAW,EAAE;MACf,CAAC;IAEL,CAAC,CAAC;IAEF,MAAMC,YAAW,GAAInB,GAAG,CAAC;MACvBoB,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE;QACX,CAAC;QACDC,KAAK,EAAE;UACLD,OAAO,EAAE,IAAI;UACbE,IAAI,EAAE;QACR;MACF;IACF,CAAC,CAAC;;IAEF;IACAxB,SAAS,CAAC,MAAM;MACdyB,eAAe,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,SAASA,eAAeA,CAAA,EAAG;MACzB,IAAIrB,KAAK,CAACC,UAAS,IAAKD,KAAK,CAACC,UAAU,CAACqB,MAAK,GAAI,CAAC,EAAE;QACnD,MAAMf,MAAK,GAAIP,KAAK,CAACC,UAAU,CAACsB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;UACzD,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,IAAI,CAACG,EAAC,GAAI,IAAI,CAAC,EAAE;UACvC,OAAO,GAAGF,IAAI,CAACG,QAAQ,CAAC,CAAC,KAAK;QAChC,CAAC,CAAC;QAEF,MAAMC,YAAW,GAAI9B,KAAK,CAACC,UAAU,CAACsB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACM,IAAI,CAAC;QAE3EzB,SAAS,CAAC0B,KAAK,CAACzB,MAAK,GAAIA,MAAM;QAC/BD,SAAS,CAAC0B,KAAK,CAACxB,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAG,GAAIoB,YAAY;MACjD;IACF;IAEA,OAAO;MAAExB,SAAS;MAAEQ;IAAa,CAAC;EACpC;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}