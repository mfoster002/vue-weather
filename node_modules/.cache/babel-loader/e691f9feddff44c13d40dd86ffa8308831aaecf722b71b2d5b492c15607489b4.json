{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar_chart = _resolveComponent(\"bar-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Hourly Forecast\", -1 /* HOISTED */)), _ctx.hourlyData.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_bar_chart, {\n    data: _ctx.chartData\n  }, null, 8 /* PROPS */, [\"data\"])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_ctx","hourlyData","length","_hoisted_1","_createVNode","_component_bar_chart","data","chartData","_createCommentVNode"],"sources":["/Users/marianfoster/vue-weather/src/components/Hourly.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Hourly Forecast</h2>\n    <div v-if=\"hourlyData.length > 0\">\n      <bar-chart :data=\"chartData\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS } from 'chart.js';\nimport { defineComponent, ref, onMounted } from 'vue';\n\nexport default defineComponent({\n  name: 'HourlyForecas',\n  components: {\n    BarChart: Bar,\n  },\n  props: {\n    hourlyData: Array,\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [\n        {\n          label: 'Temperature (Â°F)',\n          data: [],\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1,\n        },\n      ],\n    });\n\n    onMounted(() => {\n      updateChartData();\n    });\n\n    function updateChartData() {\n      const labels = props.hourlyData.slice(0, 12).map((item) => {\n        const date = new Date(item.dt * 1000);\n        return `${date.getHours()}:00`;\n      });\n\n      const temperatures = props.hourlyData.slice(0, 12).map((item) => item.temp);\n\n      chartData.value.labels = labels;\n      chartData.value.datasets[0].data = temperatures;\n    }\n\n    return { chartData };\n  },\n});\n</script>\n\n<style scoped>\nh2 {\n  text-align: center;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAKM,c,0BAJJC,mBAAA,CAAwB,YAApB,iBAAe,sBACRC,IAAA,CAAAC,UAAU,CAACC,MAAM,Q,cAA5BJ,mBAAA,CAEM,OALVK,UAAA,GAIMC,YAAA,CAA+BC,oBAAA;IAAnBC,IAAI,EAAEN,IAAA,CAAAO;EAAS,kC,KAJjCC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}