{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      api_key: '6c07b7050c30876a4e88cfbb4dee8dc3',\n      url_base: 'https://api.openweathermap.org/data/2.5/',\n      query: '',\n      weather: {},\n      geoData: {},\n      // For city, state, and country data\n      savedLocations: [] // To store saved locations\n    };\n  },\n  computed: {\n    weatherClass() {\n      const weatherCondition = this.weather.weather ? this.weather.weather[0].main.toLowerCase() : '';\n      const conditionMap = {\n        clear: 'clear',\n        clouds: 'clouds',\n        rain: 'rain',\n        drizzle: 'drizzle',\n        thunderstorm: 'thunderstorm',\n        snow: 'snow',\n        mist: 'mist',\n        haze: 'mist'\n      };\n      return conditionMap[weatherCondition] || 'default';\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === \"Enter\") {\n        fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`).then(res => res.json()).then(this.setResults);\n      }\n    },\n    setResults(results) {\n      this.weather = results;\n      this.fetchGeoData(); // Fetch city, state, and country data\n    },\n    fetchGeoData() {\n      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.query}&limit=1&appid=${this.api_key}`).then(res => res.json()).then(data => {\n        if (data[0]) {\n          const {\n            name,\n            state,\n            country\n          } = data[0];\n          this.geoData = {\n            name,\n            state,\n            country\n          };\n        }\n      });\n    },\n    saveLocation() {\n      if (this.weather.name && !this.savedLocations.includes(this.weather.name)) {\n        this.savedLocations.push(this.weather.name);\n        console.log('Saved Locations:', this.savedLocations);\n      }\n    },\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n      return `${day} ${date} ${month} ${year}`;\n    }\n  }\n};","map":{"version":3,"names":["name","data","api_key","url_base","query","weather","geoData","savedLocations","computed","weatherClass","weatherCondition","main","toLowerCase","conditionMap","clear","clouds","rain","drizzle","thunderstorm","snow","mist","haze","methods","fetchWeather","e","key","fetch","then","res","json","setResults","results","fetchGeoData","state","country","saveLocation","includes","push","console","log","navigateTo","route","$router","dateBuilder","d","Date","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear"],"sources":["/Users/marianfoster/vue-weather/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" :class=\"weatherClass\">\n    <main>\n      <!-- Search Bar -->\n      <div class=\"search-box\">\n        <input \n          type=\"text\" \n          class=\"search-bar\" \n          placeholder=\"Search...\"\n          v-model=\"query\"\n          @keypress=\"fetchWeather\"\n        />\n      </div>\n\n      <!-- Weather Information -->\n      <div class=\"weather-wrap\" v-if=\"weather.main\">\n        <div class=\"location-box\">\n          <div class=\"location\">\n            {{ weather.name }}, \n            <span v-if=\"geoData.state\">{{ geoData.state }}, </span>\n            {{ geoData.country }}\n          </div>\n          <div class=\"date\">{{ dateBuilder() }}</div>\n        </div>\n\n        <div class=\"weather-box\">\n          <div class=\"temp\">{{ Math.round(weather.main.temp) }}Â°f</div>\n          <div class=\"weather\">{{ weather.weather[0].main }}</div>\n        </div>\n\n        <button @click=\"saveLocation\">Save Location</button>\n\n        <!-- Saved Locations -->\n        <div v-if=\"savedLocations.length\">\n          <h3>Saved Locations:</h3>\n          <ul>\n            <li v-for=\"(location, index) in savedLocations\" :key=\"index\">\n              {{ location }}\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Navigation Buttons -->\n      <div class=\"button-navigation\">\n        <button @click=\"navigateTo('/')\">Home</button>\n        <button @click=\"navigateTo('/hourly')\">Hourly</button>\n        <button @click=\"navigateTo('/5day')\">5-Day Forecast</button>\n      </div>\n    </main>\n  </div>\n</template>\n\n---\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      api_key: '6c07b7050c30876a4e88cfbb4dee8dc3',\n      url_base: 'https://api.openweathermap.org/data/2.5/',\n      query: '',\n      weather: {},\n      geoData: {}, // For city, state, and country data\n      savedLocations: [] // To store saved locations\n    };\n  },\n  computed: {\n    weatherClass() {\n      const weatherCondition = this.weather.weather ? this.weather.weather[0].main.toLowerCase() : '';\n      const conditionMap = {\n        clear: 'clear',\n        clouds: 'clouds',\n        rain: 'rain',\n        drizzle: 'drizzle',\n        thunderstorm: 'thunderstorm',\n        snow: 'snow',\n        mist: 'mist',\n        haze: 'mist',\n      };\n\n      return conditionMap[weatherCondition] || 'default';\n    }\n  },\n  methods: {\n    fetchWeather(e) {\n      if (e.key === \"Enter\") {\n        fetch(`${this.url_base}weather?q=${this.query}&units=imperial&APPID=${this.api_key}`)\n          .then(res => res.json())\n          .then(this.setResults);\n      }\n    },\n    setResults(results) {\n      this.weather = results;\n      this.fetchGeoData(); // Fetch city, state, and country data\n    },\n    fetchGeoData() {\n      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${this.query}&limit=1&appid=${this.api_key}`)\n        .then(res => res.json())\n        .then(data => {\n          if (data[0]) {\n            const { name, state, country } = data[0];\n            this.geoData = { name, state, country };\n          }\n        });\n    },\n    saveLocation() {\n      if (this.weather.name && !this.savedLocations.includes(this.weather.name)) {\n        this.savedLocations.push(this.weather.name);\n        console.log('Saved Locations:', this.savedLocations);\n      }\n    },\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    dateBuilder() {\n      const d = new Date();\n      const months = [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n      ];\n      const days = [\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n      ];\n\n      const day = days[d.getDay()];\n      const date = d.getDate();\n      const month = months[d.getMonth()];\n      const year = d.getFullYear();\n\n      return `${day} ${date} ${month} ${year}`;\n    }\n  }\n};\n</script>\n\n---\n\n<style>\n/* General Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'montserrat', sans-serif;\n}\n#app {\n  background-image: url('./assets/default.jpg');\n  background-size: cover;\n  background-position: bottom;\n  transition: 0.4s;\n}\n/* Dynamic Backgrounds */\n#app.default {\n  background-image: url('./assets/default.jpg');\n}\n#app.clear {\n  background-image: url('./assets/sunny.jpg');\n}\n#app.clouds {\n  background-image: url('./assets/cloudy.jpg');\n}\n#app.rain {\n  background-image: url('./assets/rain.jpg');\n}\n/* Add other weather condition styles as needed */\n\n/* Search Box */\n.search-box {\n  width: 100%;\n  margin-bottom: 30px;\n}\n.search-bar {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  font-size: 20px;\n  border: none;\n  border-radius: 16px;\n  background: rgba(255, 255, 255, 0.5);\n  transition: 0.4s;\n}\n.search-bar:focus {\n  background: rgba(255, 255, 255, 0.75);\n}\n\n/* Weather Information */\n.location-box {\n  text-align: center;\n  color: #fff;\n}\n.weather-box .temp {\n  font-size: 64px;\n  font-weight: bold;\n  text-align: center;\n}\n.weather-box .weather {\n  font-size: 32px;\n  text-align: center;\n}\n\n/* Navigation Buttons */\n.button-navigation {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.button-navigation button {\n  padding: 10px 20px;\n  font-size: 16px;\n  background: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n.button-navigation button:hover {\n  background: #0056b3;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}